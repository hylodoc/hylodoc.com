services:
  hylodoc:
    container_name: hylodoc_container
    build:
      context: .
      dockerfile: Dockerfile.app
    ports:
      - '7980:80'
      - '7999:443'
    volumes:
      - './certs:/app/certs'
      - './checkouts:/app/checkouts'
      - './gitdirs:/app/gitdirs'
      - './websites:/app/websites'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - monitor-network
    restart:
      always

  prometheus:
    image: prom/prometheus
    logging:
      driver: none
    volumes:
      - './prometheus.yml:/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    networks:
      - monitor-network

  grafana:
    image: grafana/grafana
    logging:
      driver: none
    ports:
      - '3000:3000'
    networks:
      - monitor-network
    depends_on:
      - prometheus

  postgres:
    image: postgres:12-alpine
    container_name: postgres_container
    ports:
      - '65432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 5s
      retries: 5
    volumes:
      - './internal/model/:/docker-entrypoint-initdb.d/'
    restart: unless-stopped
    networks:
      - monitor-network

  backup:
    container_name: backup
    build:
      context: .
      dockerfile: Dockerfile.backup
    environment:
      AWS_ACCESS_KEY_ID: key
      AWS_SECRET_ACCESS_KEY: secret
      S3_PATH: path # s3 path beginning with "s3://" and no trailing slash
      PGUSER: postgres # postgres user above
      PGPASSWORD: secret # postgres password above
      PGDATABASE: hylodoc_db # postgres database in init file in internal/model
      PGHOST: postgres # postgres host name above
      PGPORT: 5432 # same as postgres (internal) port above
    networks:
      - monitor-network
    depends_on:
      - postgres

volumes:
  certs:
  folders:
  repositories:
  websites:

networks:
  monitor-network:
    driver: bridge
